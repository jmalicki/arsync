# Cargo-make configuration for arsync project
# Provides convenient tasks for development, testing, and documentation

[config]
# Default task to run when no task is specified
default_to_workspace = false

[tasks.help]
description = "Show available tasks and their descriptions"
command = "cargo"
args = ["make", "--list-all-steps"]

[tasks.build]
description = "Build the project in debug mode"
command = "cargo"
args = ["build", "--all-targets", "--all-features"]

[tasks.build-release]
description = "Build the project in release mode"
command = "cargo"
args = ["build", "--release", "--all-targets", "--all-features"]

[tasks.test]
description = "Run all tests (unit, integration, and doc tests)"
command = "cargo"
args = ["test", "--all-targets", "--all-features"]

[tasks.test-unit]
description = "Run unit tests only"
command = "cargo"
args = ["test", "--lib"]

[tasks.test-integration]
description = "Run integration tests only"
command = "cargo"
args = ["test", "--test", "integration_tests"]

[tasks.check]
description = "Run cargo check to verify compilation"
command = "cargo"
args = ["check", "--all-targets", "--all-features"]

[tasks.lint]
description = "Run clippy with strict documentation standards"
command = "cargo"
args = [
    "clippy",
    "--all-targets",
    "--all-features",
    "--",
    "-D", "warnings",
    "-D", "clippy::missing_docs_in_private_items",
    "-D", "clippy::missing_errors_doc",
    "-D", "clippy::missing_panics_doc",
    "-D", "clippy::must_use_candidate",
    "-D", "clippy::unwrap_used",
    "-D", "clippy::expect_used",
    "-D", "clippy::panic",
    "-D", "clippy::todo",
    "-D", "clippy::unimplemented",
    "-D", "clippy::unreachable"
]

[tasks.format]
description = "Format code with rustfmt"
command = "cargo"
args = ["fmt", "--all"]

[tasks.format-check]
description = "Check code formatting without modifying files"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.doc]
description = "Generate documentation with private items"
command = "cargo"
args = ["doc", "--document-private-items", "--no-deps", "--all-features"]

[tasks.doc-open]
description = "Generate and open documentation in browser"
command = "cargo"
args = ["doc", "--document-private-items", "--no-deps", "--all-features", "--open"]

[tasks.doc-check]
description = "Check documentation links and validity"
command = "cargo"
args = ["doc", "--document-private-items", "--no-deps", "--all-features", "--", "--check"]

[tasks.audit]
description = "Run security audit with cargo-audit"
command = "cargo"
args = ["audit"]

[tasks.deny]
description = "Run dependency and license checks with cargo-deny"
command = "cargo"
args = ["deny", "check"]

[tasks.outdated]
description = "Check for outdated dependencies"
command = "cargo"
args = ["outdated", "--exit-code", "1"]

[tasks.bench]
description = "Run benchmarks"
command = "cargo"
args = ["bench"]

[tasks.clean]
description = "Clean build artifacts"
command = "cargo"
args = ["clean"]

[tasks.install-tools]
description = "Install development tools (cargo-make, cargo-audit, etc.)"
command = "cargo"
args = ["install", "cargo-make", "cargo-audit", "cargo-deny", "cargo-outdated", "cargo-expand"]

[tasks.pre-commit-install]
description = "Install pre-commit hooks"
command = "pre-commit"
args = ["install"]

[tasks.pre-commit-run]
description = "Run pre-commit hooks on all files"
command = "pre-commit"
args = ["run", "--all-files"]

# Composite tasks
[tasks.ci-local]
description = "Run all CI checks locally (format, lint, test, doc, audit, deny)"
dependencies = ["format-check", "lint", "test", "doc-check", "audit", "deny"]

[tasks.quick]
description = "Quick development check (check, lint, test - no docs)"
dependencies = ["check", "lint", "test"]

[tasks.dev-setup]
description = "Set up development environment"
dependencies = ["install-tools", "pre-commit-install"]

[tasks.release-check]
description = "Check release readiness"
dependencies = ["check-release", "test-release", "lint-release"]

[tasks.check-release]
description = "Check release build"
command = "cargo"
args = ["check", "--release", "--all-targets", "--all-features"]

[tasks.test-release]
description = "Test release build"
command = "cargo"
args = ["test", "--release", "--all-targets", "--all-features"]

[tasks.lint-release]
description = "Lint release build"
command = "cargo"
args = ["clippy", "--release", "--all-targets", "--all-features", "--", "-D", "warnings"]

[tasks.coverage]
description = "Generate test coverage report (requires cargo-tarpaulin)"
command = "cargo"
args = [
    "tarpaulin",
    "--all-features",
    "--ignore-ignored",    # skip tests marked with #[ignore]
    "--out", "Html",
    "--output-dir", "coverage",
]

# Workspace tasks
[tasks.workspace-test]
description = "Run tests for entire workspace"
command = "cargo"
args = ["test", "--workspace", "--all-targets", "--all-features"]

[tasks.workspace-build]
description = "Build entire workspace"
command = "cargo"
args = ["build", "--workspace", "--all-targets", "--all-features"]

[tasks.workspace-lint]
description = "Lint entire workspace"
command = "cargo"
args = [
    "clippy",
    "--workspace",
    "--all-targets",
    "--all-features",
    "--",
    "-D", "warnings",
    "-D", "clippy::missing_docs_in_crate_items",
    "-D", "clippy::missing_errors_doc",
    "-D", "clippy::missing_panics_doc"
]

# Environment variables for tasks
[env]
CARGO_TERM_COLOR = "always"
RUST_BACKTRACE = "1"
