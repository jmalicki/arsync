name: CI (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit weekly on Mondays at midnight UTC
    - cron: '0 0 * * 1'

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Enable sccache for faster compilation
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA: true

permissions:
  contents: read
  checks: write
  actions: read  # For sccache

jobs:
  # Quick checks run first for fast feedback
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy (strict documentation standards)
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::missing_docs_in_private_items \
          -D clippy::missing_errors_doc \
          -D clippy::missing_panics_doc \
          -D clippy::must_use_candidate \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::todo \
          -D clippy::unimplemented \
          -D clippy::unreachable

  # Dependency checks using marketplace actions
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    # Use marketplace action for cargo-deny
    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check
        args: --all-features
    
    # Use marketplace action for cargo-outdated
    - name: Check for outdated dependencies
      uses: taiki-e/cargo-outdated-action@v1
      with:
        args: --depth 1 --color always --exit-code 1 --ignore cargo-deny
      continue-on-error: ${{ github.event_name == 'pull_request' }}

  # Test on multiple Rust versions
  test:
    name: Test (${{ matrix.rust }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        rust: 
          - stable
          - beta
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Run unit tests
      run: cargo test --all-features --lib
    
    - name: Run integration tests
      run: cargo test --all-features --test integration_tests
    
    - name: Run doc tests
      run: cargo test --all-features --doc
    
    - name: Build release binary
      run: cargo build --release

  # Coverage using marketplace action
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    permissions:
      contents: write  # Needed for GitHub Pages deployment
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
  
    # Use marketplace action for tarpaulin
    - name: Generate coverage report
      uses: actions-rs/tarpaulin@v0.1
      with:
        version: '0.32.8'
        args: '--all-features --out Html --output-dir coverage'
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # Security audit using marketplace action
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    # Use marketplace action for cargo-audit
    - name: Run security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --deny warnings
      continue-on-error: ${{ github.event.schedule != '' }}

  # Benchmarks run on main and PRs for comparison
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need history for comparison
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Run benchmarks
      run: cargo bench --all-features
    
    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/
        retention-days: 30

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [code-quality, coverage]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Build documentation
      run: cargo doc --document-private-items --no-deps --all-features
      env:
        RUSTDOCFLAGS: -D warnings
    
    - name: Download coverage report
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: coverage-temp
      continue-on-error: true
    
    - name: Create documentation index with links
      run: |
        cat > target/doc/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>io_uring_sync4 - Documentation & Reports</title>
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
              margin: 0;
              padding: 40px;
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              min-height: 100vh;
            }
            .container {
              max-width: 900px;
              margin: 0 auto;
              background: white;
              border-radius: 12px;
              padding: 40px;
              box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            }
            h1 {
              color: #333;
              margin-bottom: 10px;
            }
            .subtitle {
              color: #666;
              margin-bottom: 40px;
            }
            .cards {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
              gap: 20px;
              margin-top: 30px;
            }
            .card {
              padding: 30px;
              background: #f8f9fa;
              border-radius: 8px;
              text-decoration: none;
              color: inherit;
              transition: transform 0.2s, box-shadow 0.2s;
            }
            .card:hover {
              transform: translateY(-4px);
              box-shadow: 0 8px 24px rgba(0,0,0,0.15);
            }
            .card-icon {
              font-size: 48px;
              margin-bottom: 15px;
            }
            .card-title {
              font-size: 20px;
              font-weight: 600;
              color: #333;
              margin-bottom: 10px;
            }
            .card-desc {
              color: #666;
              font-size: 14px;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #e0e0e0;
              text-align: center;
              color: #888;
              font-size: 14px;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>ðŸš€ io_uring_sync4</h1>
            <p class="subtitle">High-performance async I/O synchronization library</p>
            
            <div class="cards">
              <a href="io_uring_sync4/index.html" class="card">
                <div class="card-icon">ðŸ“š</div>
                <div class="card-title">API Documentation</div>
                <div class="card-desc">Browse the complete API documentation</div>
              </a>
              
              <a href="coverage/index.html" class="card">
                <div class="card-icon">ðŸ“Š</div>
                <div class="card-title">Code Coverage</div>
                <div class="card-desc">View test coverage reports</div>
              </a>
              
              <a href="https://github.com/${{ github.repository }}" class="card">
                <div class="card-icon">ðŸ’»</div>
                <div class="card-title">Source Code</div>
                <div class="card-desc">View on GitHub</div>
              </a>
            </div>
            
            <div class="footer">
              Last updated: $(date -u +"%Y-%m-%d %H:%M UTC") | Commit: ${GITHUB_SHA:0:8}
            </div>
          </div>
        </body>
        </html>
        EOF
        
        # Move coverage into docs directory for combined deployment
        if [ -d coverage-temp ]; then
          mv coverage-temp target/doc/coverage
        fi
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true

  # Final status check for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - dependencies
      - test
      - coverage
      - security
      - docs
    if: always()
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          if [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "One or more jobs were cancelled"
            exit 1
          fi
          echo "All jobs succeeded!"