name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        # Cache key prefix for this project
        prefix-key: "io-uring-sync"
        # Cache all crates (useful for CI tooling)
        cache-all-crates: "true"
        # Cache workspace crates (libraries updated sporadically)
        cache-workspace-crates: "true"
        # Cache cargo binaries
        cache-bin: "true"
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy (strict documentation standards)
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::missing_docs_in_crate_items \
          -D clippy::missing_errors_doc \
          -D clippy::missing_panics_doc \
          -D clippy::must_use_candidate \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::todo \
          -D clippy::unimplemented \
          -D clippy::unreachable
    
    - name: Run tests
      run: cargo test --all-features
    
    - name: Run integration tests
      run: cargo test --test integration_tests
    
    - name: Build release
      run: cargo build --release

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.75
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "io-uring-sync-coverage"
        cache-all-crates: "true"
        cache-workspace-crates: "true"
        cache-bin: "true"
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Generate coverage report
      run: cargo tarpaulin --all-features --out Html --output-dir coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.75
    
    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "io-uring-sync-security"
        cache-all-crates: "true"
        cache-bin: "true"
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.75
    
    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "io-uring-sync-deps"
        cache-all-crates: "true"
        cache-bin: "true"
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Install cargo-outdated
      run: cargo install cargo-outdated
    
    - name: Check dependencies with cargo-deny
      run: cargo deny check
    
    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.75
    
    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "io-uring-sync-bench"
        cache-all-crates: "true"
        cache-workspace-crates: "true"
        cache-bin: "true"
    
    - name: Run benchmarks
      run: cargo bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.75
    
    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "io-uring-sync-docs"
        cache-all-crates: "true"
        cache-workspace-crates: "true"
        cache-bin: "true"
    
    - name: Build documentation (with private items)
      run: cargo doc --document-private-items --no-deps --all-features

    - name: Check documentation links
      run: cargo doc --document-private-items --no-deps --all-features
    
    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
