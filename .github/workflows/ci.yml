name: CI (Optimized)

on:
  push:
    branches:
      - main
  pull_request:
    # No branches specified = all PRs
  schedule:
    - cron: '0 0 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # RUSTC_WRAPPER: sccache  # Temporarily disabled
  # SCCACHE_GHA: true

permissions:
  contents: read
  checks: write
  actions: read

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::missing_docs_in_private_items \
          -D clippy::missing_errors_doc \
          -D clippy::missing_panics_doc \
          -D clippy::must_use_candidate \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::todo \
          -D clippy::unimplemented \
          -D clippy::unreachable

  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Install cargo-deny
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-deny@0.17.0

    - name: Install cargo-outdated
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-outdated@0.17
    
    - name: Check dependencies with cargo-deny
      run: cargo deny check
    
    - name: Check for outdated dependencies
      run: cargo outdated --depth 1 --color always --exit-code 1 --ignore cargo-deny
      continue-on-error: ${{ github.event_name == 'pull_request' }}

  test:
    name: Fast Tests (${{ matrix.rust }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        rust: 
          - stable
          # - beta  # Disabled: has flaky tests (test_preserve_metadata_large_file)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    
    - name: Build all tests
      run: cargo test --no-run --all-features
    
    - name: Run fast tests (unit tests, quick checks)
      run: |
        cargo nextest run --profile ci --all-features \
          -E '!binary(~integration) & !binary(~performance) & !binary(~rsync)'
    
    - name: Run doc tests
      run: cargo test --all-features --doc
    
    - name: Build release binary
      run: cargo build --release

  integration-tests:
    name: Integration Tests (${{ matrix.rust }})
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        rust: 
          - stable
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    
    - name: Build all tests
      run: cargo test --no-run --all-features
    
    - name: Run integration tests
      run: cargo nextest run --profile ci --all-features -E 'binary(~integration)'
    
    - name: Run metadata tests
      run: cargo nextest run --profile ci --all-features -E 'binary(~metadata)'
    
    - name: Run xattr tests
      run: cargo nextest run --profile ci --all-features -E 'binary(~xattr)'
    
    - name: Run rsync tests
      run: cargo nextest run --profile ci --all-features -E 'binary(~rsync)'

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    
    - name: Build all tests
      run: cargo test --no-run --all-features
    
    - name: Run performance tests
      run: cargo nextest run --profile ci --all-features -E 'binary(~performance)'

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-tests]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
  
    - name: Install tarpaulin
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-tarpaulin@0.32.8
          
    - name: Generate coverage report
      run: cargo tarpaulin --lib --all-features --out Html --output-dir coverage
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Install cargo-audit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit@0.21
    
    - name: Run security audit
      run: cargo audit --deny warnings
      continue-on-error: ${{ github.event.schedule != '' }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Run benchmarks
      run: cargo bench --all-features
    
    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/
        retention-days: 30

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-tests]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: ./.github/actions/setup-rust-optimized
    
    - name: Build documentation
      run: cargo doc --document-private-items --no-deps --all-features
      env:
        RUSTDOCFLAGS: -D warnings
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - dependencies
      - test
      - integration-tests
      - coverage
      - security
      - docs
    if: always()
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          if [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "One or more jobs were cancelled"
            exit 1
          fi
          echo "All jobs succeeded!"
          echo "Note: Performance tests run conditionally on main branch"
