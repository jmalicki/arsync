[package]
name = "arsync"
version = "0.1.0"
edition = "2021"
rust-version = "1.90.0"
authors = ["Your Name <your.email@example.com>"]
description = "High-performance async file copying utility using io_uring - modern rsync alternative"
license = "MIT"
repository = "https://github.com/yourusername/arsync"
keywords = ["io_uring", "file-copy", "async", "performance", "rsync"]
categories = ["command-line-utilities", "filesystem", "asynchronous"]
readme = "README.md"

[lib]
name = "arsync"
path = "src/lib.rs"

[[bin]]
name = "arsync"
path = "src/main.rs"

[workspace]
members = ["benchmarks","crates/compio-fs-extended"]

# Workspace-wide lints configuration (replaces clippy.toml)
# This enforces high documentation and code quality standards

# Rustc lints
[workspace.lints.rust]
# Our MSRV (1.90.0) fully supports async fn in trait (stable since 1.75.0)
async-fn-in-trait = "allow"

[workspace.lints.clippy]
# Complexity and code quality lints
too-many-arguments = "warn"
too-many-lines = "warn"
many-single-char-names = "warn"

# Correctness and best practices
unwrap-used = "warn"
expect-used = "warn"
panic = "warn"

# Documentation
missing-docs-in-private-items = "allow"
missing-errors-doc = "warn"
missing-panics-doc = "warn"

# Note: The following settings from clippy.toml cannot be directly migrated to [lints]:
# - doc-valid-idents, disallowed-names, disallowed-types, disallowed-methods
# - allow-unwrap-in-tests, allow-expect-in-tests
# These still require a clippy.toml file if needed, or use #[allow] attributes in code

# Apply workspace lints to the main package
[lints]
workspace = true

[dependencies]
# Core async runtime
compio = { version = "0.16", features = ["macros", "dispatcher", "process"] }
futures = "0.3"

# CLI and error handling
clap = { version = "4.0", features = ["derive"] }
anyhow = "1.0"
thiserror = "2.0"

# Logging and progress
tracing = "0.1"
tracing-subscriber = "0.3"
indicatif = "0.18"

# System utilities
num_cpus = "1.0"
dashmap = "6.1"
walkdir = "2.0"

# Checksums and hashing for rsync protocol
simd-adler32 = "0.3"  # SIMD-accelerated Adler-32 (3-5x faster)
md5 = "0.8"

# File metadata manipulation
filetime = "0.2"

# i18n (internationalization)
fluent = "0.17"
unic-langid = "0.9"

# io_uring libraries
libc = "0.2"
# rio removed - using compio instead
# nix removed - using io_uring operations instead

# Extended io_uring operations
compio-fs-extended = { path = "crates/compio-fs-extended", features = ["xattr"] }

# Async synchronization primitives (external repository)
compio-sync = { git = "https://github.com/jmalicki/compio-sync", tag = "v0.0.2" }

# Remote sync dependencies (optional)
tokio = { version = "1.0", features = ["process", "io-util", "rt", "fs", "macros"], optional = true }
rand = { version = "0.9.2", optional = true }

# Build dependencies
[build-dependencies]
cc = "1.0"

# Benchmarking (optional)
criterion = { version = "0.7", features = ["html_reports"], optional = true }

[dev-dependencies]
# Testing
tempfile = "3.0"
assert_cmd = "2.0"
predicates = "3.0"
rstest = "0.26"
walkdir = "2.0"
xattr = "1.0"
pulldown-cmark = "0.13"

# Testcontainers for integration testing
testcontainers = "0.25"
tokio = { version = "1.0", features = ["full"] }

# Documentation and linting
mdbook = "0.4"
cargo-make = "0.37"
# cargo-deny = "0.17"  # Temporarily disabled due to rustsec compatibility issue
cargo-audit = "0.21"
# cargo-outdated = "0.17"  # Temporarily disabled
# cargo-expand = "1.0"  # Temporarily disabled

[features]
default = ["remote-sync"]
benchmarks = ["criterion"]
remote-sync = ["tokio", "rand"]
rand = ["dep:rand"]

[profile.release]
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.bench]
inherits = "release"

